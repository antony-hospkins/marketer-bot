require("dotenv").config();
const { Telegraf } = require("telegraf");
const moment = require("moment");
const { constants, buttons } = require("./constants");
const { renderButtons, getUnixTime } = require("./helpers");
const { userMessages } = require("./content");
const gsService = require("./services/gs.service");
const LocalSession = require("telegraf-session-local");
const apiService = require("./services/api.service.js");

const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(new LocalSession({ database: "session.json" }).middleware());

bot.start(async (ctx) => {
  const { from } = ctx.message;
  const isPermissions = await gsService.checkPermissions(from?.id);
  // const dayOfTheStatistics = moment().endOf("month").format("YYYY.MM.DD");

  // const dayOfTheStatisticsUnix = getUnixTime(dayOfTheStatistics) + 86400;
  // const currentDayUnix = getUnixTime();

  // const sendStatisticsIn = dayOfTheStatisticsUnix - currentDayUnix;

  if (isPermissions) {
    // setTimeout(() => {
    //   // it will send in the first day of the month (00:00:00)
    //   ctx.reply("–û—Ç—á—ë—Ç –∑–∞ ");
    // }, sendStatisticsIn);

    // return ctx.reply("–ß—Ç–æ-–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /menu");
    const chatId = ctx.chat.id;
    ctx.session.current_step = constants.steps.MAIN_MENU;
    bot.telegram.sendMessage(chatId, "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", {
      reply_markup: {
        keyboard: [[buttons.COMMON_STATISTICS, buttons.ACTIVE_USERS], [buttons.SEARCH_USER]],
        resize_keyboard: true,
      },
    });
  } else {
    ctx.session.current_step = constants.steps.START_BOT;

    ctx.reply(userMessages?.[0]?.message);

    const user = await apiService.fetchUserByUsername(from?.username);
    const isExist = user?.id;

    if (!isExist) {
      ctx.session.userData = {
        id: from?.id,
        username: from?.username,
        started_at: getUnixTime(),
        stages: {
          0: { title: "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–æ–º–º–∞–Ω–¥–æ–π /start", status: "pending" },
          1: { title: "–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", status: "coming" },
          2: { title: "–ö–∞–∫ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º", status: "coming" },
          3: { title: "–†–∞–±–æ—á–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", status: "coming" },
          4: { title: "–ù–∞—á–∞–ª–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞", status: "coming" },
          5: { title: "–ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", status: "coming" },
          6: { title: "–û –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", status: "coming" },
          7: { title: "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ", status: "coming" },
          8: { title: "–ö–æ–Ω—Ç—Ä–∞–∫—Ç", status: "coming" },
        },
      };

      const data = await apiService.addUser(ctx.session.userData);

      ctx.session.userData = {
        ...ctx.session.userData,
        fbId: data?.name,
      };
    }

    return;
  }
});

bot.on("message", async (ctx) => {
  const chatId = ctx.chat.id;
  // for menu ------------------------
  if (ctx?.update?.message?.text === "‚¨ÖÔ∏è –ù–∞–∑–∞–¥") {
    ctx.session.current_step = constants.steps.MAIN_MENU;

    return bot.telegram.sendMessage(chatId, "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", {
      reply_markup: {
        keyboard: [[buttons.COMMON_STATISTICS, buttons.ACTIVE_USERS], [buttons.SEARCH_USER]],
        resize_keyboard: true,
      },
    });
  }

  if (ctx.session.current_step === constants.steps.MAIN_MENU) {
    switch (ctx?.update?.message?.text) {
      case "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": {
        ctx.session.current_step = constants.steps.GENERAL_STATISTICS;

        return bot.telegram.sendMessage(
          chatId,
          "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∑–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì",
          {
            reply_markup: {
              keyboard: [[buttons.BACK_BUTTON]],
              resize_keyboard: true,
            },
          }
        );
      }
      case "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏": {
        await ctx.replyWithHTML(
          "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏—é: \n\n<i>(–ó–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –Ω–µ –±–æ–ª–µ–µ 2—Ö –Ω–µ–¥–µ–ª—å –Ω–∞–∑–∞–¥)</i>"
        );

        const data = await apiService.fetchUsers();

        await ctx.replyWithHTML(
          data
            ?.map(
              (i) =>
                `<b>–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ @${
                  i?.username
                }</b>\n\n<i>–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –±–æ—Ç–∞:</i>\n${i?.stages
                  ?.map(
                    (s) =>
                      ` - ${s.title} ${s?.status === "done" ? "‚úÖ" : ""}${
                        s?.status === "pending" ? "‚è≥" : ""
                      }${s?.status === "coming" ? "üü°" : ""}\n`
                  )
                  .join("")}\n`
            )
            .join("")
        );
        return;
      }
      case "üîç –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞": {
        ctx.session.current_step = constants.steps.SEARCH_USER;

        return bot.telegram.sendMessage(
          chatId,
          "–í–≤–µ–¥–∏—Ç–µ username —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏",
          {
            reply_markup: {
              keyboard: [[buttons.BACK_BUTTON]],
              resize_keyboard: true,
            },
          }
        );
      }
    }
  }

  // ---------------------------------
  if (ctx.session.current_step === constants.steps.GENERAL_STATISTICS) {
    const [start, end] = ctx?.update?.message?.text.split("-")?.map((i) => i.trim());

    if (start && end) {
      const startUnixTime = getUnixTime(start.split(".").reverse());
      const endUnixTime = getUnixTime(end.split(".").reverse());

      const { passing, passedSuccessfully, passedUnsuccessfully } =
        await apiService.fetchUsersByPeriod(startUnixTime, endUnixTime);

      ctx.session.current_step = constants.steps.MAIN_MENU;
      return ctx.reply(`–ü–µ—Ä–∏–æ–¥: ${ctx?.update?.message?.text}

${passing} - –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –±–æ—Ç–∞
${passedSuccessfully} - —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –±–æ—Ç–∞
${passedUnsuccessfully} - –Ω–µ –ø—Ä–æ—à–ª–∏ –±–æ—Ç–∞`);
    } else {
      return ctx.reply(
        `–í—ã –≤–≤–æ–¥–∏—Ç–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥!\n\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì`
      );
    }
  }

  if (ctx.session.current_step === constants.steps.SEARCH_USER) {
    const username = ctx?.update?.message?.text;
    const user = await apiService.fetchUserByUsername(username);

    if (user) {
      ctx.session.current_step = constants.steps.MAIN_MENU;
      return ctx.reply(
        `–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ @${user?.username}\n\n–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∫–æ–º–º–∞–Ω–¥–æ–π /start ${new Date(
          user?.started_at * 1000
        ).toLocaleString()}`
      );
    } else {
      return ctx.reply(`–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª/–ø—Ä–æ—Ö–æ–¥–∏—Ç –±–æ—Ç–∞`);
    }
  }

  // ---------------------------------
  if (ctx.session.current_step === constants.steps.START_BOT) {
    const { fbId, stages } = ctx.session.userData;

    if (fbId) {
      apiService.updateUser(fbId, {
        stages: {
          ...stages,
          0: { ...stages["0"], status: "done" },
          1: { ...stages["1"], status: "pending" },
        },
      });
    }

    ctx.session.current_step = constants.steps.ADAPTATION_CONTENT;

    return ctx.reply(
      userMessages?.[1]?.message,
      renderButtons([{ title: "–î–∞–ª–µ–µ", id: "next-button" }])
    );
  }

  // ...
  if (ctx.session.current_step === constants.steps.ABOUT_THE_PLATFORM) {
    if (ctx?.update?.message?.photo) {
      ctx.session.current_step = constants.steps.STAGES_OF_WORK;

      const { fbId, stages } = ctx.session.userData;
      if (fbId) {
        apiService.updateUser(fbId, {
          stages: {
            ...stages,
            0: { ...stages["0"], status: "done" },
            1: { ...stages["1"], status: "done" },
            2: { ...stages["2"], status: "done" },
            3: { ...stages["3"], status: "done" },
            4: { ...stages["4"], status: "pending" },
          },
        });
      }

      return ctx.reply(
        userMessages?.[4]?.message,
        renderButtons([{ title: "–î–∞–ª–µ–µ", id: "next-button" }])
      );
    } else {
      return ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ");
    }
  }
});

const onClickButton = (id) => {
  bot.action(id, async (ctx) => {
    await ctx.answerCbQuery();

    try {
      if (ctx.session.current_step === constants.steps.ADAPTATION_CONTENT) {
        ctx.session.current_step = constants.steps.HOW_WE_WORK;

        const { fbId, stages } = ctx.session.userData;
        if (fbId) {
          apiService.updateUser(fbId, {
            stages: {
              ...stages,
              0: { ...stages["0"], status: "done" },
              1: { ...stages["1"], status: "done" },
              2: { ...stages["2"], status: "pending" },
            },
          });
        }

        return ctx.reply(
          userMessages?.[2]?.message,
          renderButtons([{ title: "–î–∞–ª–µ–µ", id: "next-button" }])
        );
      }

      if (ctx.session.current_step === constants.steps.HOW_WE_WORK) {
        ctx.session.current_step = constants.steps.ABOUT_THE_PLATFORM;

        const { fbId, stages } = ctx.session.userData;

        if (fbId) {
          apiService.updateUser(fbId, {
            stages: {
              ...stages,
              0: { ...stages["0"], status: "done" },
              1: { ...stages["1"], status: "done" },
              2: { ...stages["2"], status: "done" },
              3: { ...stages["3"], status: "pending" },
            },
          });
        }

        return ctx.reply(userMessages?.[3]?.message);
      }

      if (ctx.session.current_step === constants.steps.STAGES_OF_WORK) {
        ctx.session.current_step = constants.steps.DISTRIBUTION_OF_PROFILES;

        const { fbId, stages } = ctx.session.userData;

        if (fbId) {
          apiService.updateUser(fbId, {
            stages: {
              ...stages,
              0: { ...stages["0"], status: "done" },
              1: { ...stages["1"], status: "done" },
              2: { ...stages["2"], status: "done" },
              3: { ...stages["3"], status: "done" },
              4: { ...stages["4"], status: "done" },
              5: { ...stages["5"], status: "pending" },
            },
          });
        }

        return ctx.reply(
          userMessages?.[5]?.message,
          renderButtons([{ title: "–î–∞–ª–µ–µ", id: "next-button" }])
        );
      }

      if (ctx.session.current_step === constants.steps.DISTRIBUTION_OF_PROFILES) {
        ctx.session.current_step = constants.steps.ABOUT_COMMUNICATION;

        const { fbId, stages } = ctx.session.userData;

        if (fbId) {
          apiService.updateUser(fbId, {
            stages: {
              ...stages,
              0: { ...stages["0"], status: "done" },
              1: { ...stages["1"], status: "done" },
              2: { ...stages["2"], status: "done" },
              3: { ...stages["3"], status: "done" },
              4: { ...stages["4"], status: "done" },
              5: { ...stages["5"], status: "done" },
              6: { ...stages["6"], status: "pending" },
            },
          });
        }

        return ctx.reply(
          userMessages?.[6]?.message,
          renderButtons([{ title: "–î–∞–ª–µ–µ", id: "next-button" }])
        );
      }

      if (ctx.session.current_step === constants.steps.ABOUT_COMMUNICATION) {
        ctx.session.current_step = constants.steps.EXTRA_INFO_ABOUT_PLATFORM;

        const { fbId, stages } = ctx.session.userData;

        if (fbId) {
          apiService.updateUser(fbId, {
            stages: {
              ...stages,
              0: { ...stages["0"], status: "done" },
              1: { ...stages["1"], status: "done" },
              2: { ...stages["2"], status: "done" },
              3: { ...stages["3"], status: "done" },
              4: { ...stages["4"], status: "done" },
              5: { ...stages["5"], status: "done" },
              6: { ...stages["6"], status: "done" },
              7: { ...stages["7"], status: "pending" },
            },
          });
        }

        return ctx.replyWithHTML(
          userMessages?.[7]?.message,
          renderButtons([{ title: "–î–∞–ª–µ–µ", id: "next-button" }])
        );
      }

      if (ctx.session.current_step === constants.steps.EXTRA_INFO_ABOUT_PLATFORM) {
        ctx.session.current_step = constants.steps.CONTRACT;

        const { fbId, stages } = ctx.session.userData;

        if (fbId) {
          apiService.updateUser(fbId, {
            stages: {
              ...stages,
              0: { ...stages["0"], status: "done" },
              1: { ...stages["1"], status: "done" },
              2: { ...stages["2"], status: "done" },
              3: { ...stages["3"], status: "done" },
              4: { ...stages["4"], status: "done" },
              5: { ...stages["5"], status: "done" },
              6: { ...stages["6"], status: "done" },
              7: { ...stages["7"], status: "done" },
              8: { ...stages["8"], status: "done" },
            },
          });
        }

        return ctx.replyWithHTML(
          userMessages?.[8]?.message
          // renderButtons([{ title: "–ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å", id: "ready-button" }])
        );
      }
      // ============================
      if (ctx.session.current_step === constants.steps.START_BOT && id === "users-list") {
        const data = await apiService.fetchUsers();

        let message = ``;

        data.forEach((user) => {
          message = `${message} \n\n –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${user?.username}

–ü—Ä–æ–≥—Ä–µ—Å—Å:
${user?.stages
  ?.map((stage) => stage?.title && ` - ${stage?.title}\n`)
  .join("")
  .split(",")}`;
        });

        ctx.reply(message);
      }
    } catch (error) {
      // ...
    }
  });
};

[{ title: "–î–∞–ª–µ–µ", id: "next-button" }].forEach((button) => onClickButton(button.id));
// ...
[{ title: "–ì–æ—Ç–æ–≤", id: "ready-button" }].forEach((button) => onClickButton(button.id));

bot.launch();

// Enable graceful stop
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
